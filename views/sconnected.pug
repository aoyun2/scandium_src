html 
  head
    title Connected!
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    link(href='https://fonts.googleapis.com/css?family=Muli', rel='stylesheet')
    link(rel="icon", type="image/png", href="https://cdn.glitch.com/3ebdc662-0a1e-4e5b-a129-4e6528173744%2Fsc-213674.webp?v=1605487166515")
    style(type='text/css').
       html, body {
           vertical-align: middle;
           background:url('https://cdn.glitch.com/3ebdc662-0a1e-4e5b-a129-4e6528173744%2F459723.jpg?v=1605538993879') no-repeat fixed center;
           background-size: 100% 100%;
           margin-top: 2%;
           margin-left: 10%;
       }
       .text {
           color: white;
           font-family: "Muli";
       }
       .input {
            border-bottom: 3px solid white;
            border-left: 0px;
            border-right: 0px;
            border-top: 0px;
            max-width: 80%;
            color: white;
            background:transparent;
            font-family: "Muli";
            outline:none;
        }
        .input:-webkit-autofill,
        .input:-webkit-autofill:hover,
        .input:-webkit-autofill:focus,
        .input:-webkit-autofill:active {
            -webkit-text-fill-color: darkgray;
            transition: background-color 5000s ease-in-out 0s;
        }
        .scrollable {
          max-width: 1000px;
          max-height: 500px;
          overflow: scroll;
          display: flex;
          flex-direction: column-reverse;
          overflow-wrap: break-word;
        }
        *::-webkit-scrollbar {
          display: none;
        }
        .send-button img {
            width: 40px;
            height: 40px;
            outline:none;
            border: 0px;
        }
        .hoverable {
          transition: transform .2s; 
          margin: 0 auto;
        }
        .hoverable:hover {
          transform: scale(1.2); 
        }
        video:focus {
            outline: none;
        }
        textarea::-webkit-input-placeholder {
          color: white;
        }
        select.hoverable:hover {
          transform: scale(1.1);
        }
        select > option {
          color: black;
          background-color: rgb(163,166,232);
        }
        select > option:hover {
          background-color: purple;
        }
        progress {
          -webkit-appearance: none;
          height: 10px;
          border: 1px solid white;
          border-radius: 5px;
        }
        ::-webkit-progress-bar {
          background-color: transparent;
          border-radius: 5px;
        }
        ::-webkit-progress-value {
          color: white;
          background: white;
          border-radius: 5px;
        }
        .errorShake {
            position: relative;
            -webkit-animation: shake .43s linear;
        }
        #fader {
          background: black;
          pointer-events: none;
          position: fixed;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          z-index: 999999;
          -webkit-animation-duration: 500ms;
          -webkit-animation-timing-function: ease-in-out;
        }
        #fader.fade-out {
           opacity: 0;
           -webkit-animation-name: fade-out;
        }
        #fader.fade-in {
           opacity: 1;
           -webkit-animation-name: fade-in;
        }
        @-webkit-keyframes fade-out {
           0% { opacity: 1 }
           100% { opacity: 0 }
        }
        @-webkit-keyframes fade-in {
           0% { opacity: 0 }
           100% { opacity: 1 }
        }
        @-webkit-keyframes shake {
          0% {
              left:-10px;
          }
          16% {
              left:9px;
          }
          33% {
              left:-6px;
          }
          50% {
              left:5px;
          }
          66% {
              left:-2px;
          }
          83% {
              left:1px;
          }
          100% {
              left: 0px;
          }
       }
  body
    svg(id="fader", class="fade-out")
    script.
      localStorage.open = Date.now();
      var onLocalStorageEvent = function(e){
        if(e.key == "open"){
          localStorage.ispage = Date.now();
        }
        if(e.key == "ispage"){
          alert("You are already signed in on another tab.");
          fader.classList.add("fade-in");
          window.location.replace("https://scandium.glitch.me/");
        }
      };
      window.addEventListener('storage', onLocalStorageEvent, false);
      
    input(type="button", onclick='back()', value="Log out", class="input hoverable")
    h1(class="text")=welcome
    h2(class="text")
    p
    div(id="msgcn", class="scrollable", style="")
    p
    p(class="text") Channel:
    select(id='chn', onchange="updateArr(); updateHeader()", class="input hoverable")
      each chn in chns
        option(value=chn) #{chn}
    p
    textarea(id="msgin", class="input", rows=5, cols=50, placeholder="Type a message here")
    
    button(onclick="sendMsg()", class="send-button hoverable", style="outline:none; border:0px; background:transparent;")
      img(src="https://cdn.glitch.com/3ebdc662-0a1e-4e5b-a129-4e6528173744%2F3ebdc662-0a1e-4e5b-a129-4e6528173744%252Fsend-message-icon-png-10.png?v=1606765543624")
    p
    script(src="/socket.io/socket.io.js")
    
    script.
      const socket = io();
      const server = "#{ser}";
      const channel = document.querySelector('body > select[id="chn"]');
      const pass = document.querySelector('body > input[id="pass"]');
      const dropdown = document.querySelector("body > select"); 
      const messages = document.querySelector('body > div[id="msgcn"]');
      const messageContainer = document.querySelector('body > textarea[id="msgin"]');
      const idContainer = "#{id}";
      let progressbar;
      let loadMoreButton;
      let loadMoreSpinner;
      let clientID;

      socket.on('id', (id) => {
        if(!clientID) {
          clientID = id;
          updateArr();
          loadMsgs();
        }
      });
      
      socket.on("senderr", (e) => {
        messageContainer.classList.add("errorShake");
      });

      socket.on('messagePackage', async (data) => {
          if ((data.channel !== channel.value)) return;
          
          if (data.mode === "all") {
            while (progressbar.value < progressbar.max) {
                progressbar.value += (progressbar.max/10);
                await sleep(75);
            }

            while (messages.firstChild) {
                messages.removeChild(messages.firstChild);
            }
          }

          if(data.messages.length <= 0) {
              let p = document.createElement("p");
              p.innerText = "No messages yet, be the first to send one!";
              p.classList.add("text");
              messages.appendChild(p);
              return;
          }

          for(x of data.messages) {
            let p = document.createElement("p");
            let msgInfo = document.createElement("strong");
            p.innerText = x[0][2];
            msgInfo.innerText = x[0][0] + `, ${new Date(x[0][1]).toLocaleDateString()}, ${new Date(x[0][1]).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}` + ':';
            p.classList.add("text");
            p.id = x[0][3];
            msgInfo.classList.add("text");
            
            if (data.mode === "newMsg") {
                messages.insertBefore(msgInfo, messages.firstChild);
                messages.insertBefore(p, messages.firstChild);
                messages.insertBefore(document.createElement("br"), messages.firstChild);
            }

            if ((x[1].length > 0)) {
              for(y of x[1]) {
                const blob = new Blob([y[1]], {type:y[0]});
                console.log(blob);
                const ourl = URL.createObjectURL(blob);
                switch((y[0].split('/'))[0]) {
                  case "image":           
                    const image = document.createElement("img");
                    image.style.borderRadius = "10px";
                    image.loading = "lazy";
                    image.style.display = "flex";
                    image.style.alignSelf = "flex-start";
                    image.style.maxWidth = "30%";
                    image.style.maxHeight = "1000px";
                    image.src = ourl;
                    const link = document.createElement("a");
                    link.style.fontWeight = "bold";
                    link.style.fontSize = "15px";
                    link.setAttribute("href", ourl);
                    link.innerText = "Click to view original image";
                    link.target = "_blank";
                    link.style.color = "rgb(163,166,232)";
                    if (data.mode === "all" || data.mode === "before") {
                      messages.appendChild(document.createElement("br"));
                      messages.appendChild(link);
                      messages.appendChild(document.createElement("br"));
                      messages.appendChild(image);
                    } else if (data.mode === "newMsg") {
                      messages.insertBefore(image, messages.firstChild);
                      messages.insertBefore(document.createElement("br"), messages.firstChild);
                      messages.insertBefore(link, messages.firstChild);
                      messages.insertBefore(document.createElement("br"), messages.firstChild);
                    }
                    break;
                  case "video":
                    const v = document.createElement("video");
                    v.setAttribute("src", ourl);
                    v.setAttribute("controls", true);
                    v.loading = "lazy";
                    v.style.maxWidth = "30%";
                    v.style.maxHeight = "1000px";
                    v.style.borderRadius = "10px";
                    const myVideo = document.createElement("a");
                    myVideo.setAttribute("href", ourl);
                    myVideo.innerText = "Click to view original video";
                    myVideo.style.fontWeight = "bold";
                    myVideo.classList.add("text");
                    myVideo.style.color = "rgb(163,166,232)";
                    myVideo.target = "_blank";
                    if (data.mode === "all" || data.mode === "before") {
                      messages.appendChild(document.createElement("br"));
                      messages.appendChild(myVideo);
                      messages.appendChild(document.createElement("br"));
                      messages.appendChild(v);
                    } else if (data.mode === "newMsg") {
                      messages.insertBefore(v, messages.firstChild);
                      messages.insertBefore(document.createElement("br"), messages.firstChild);
                      messages.insertBefore(myVideo, messages.firstChild);
                      messages.insertBefore(document.createElement("br"), messages.firstChild);
                    }
                    break;
                }
              }
            }
            if (data.mode === "all" || data.mode === "before") {
                messages.appendChild(document.createElement("br"));
                messages.appendChild(p);
                messages.appendChild(msgInfo);
            }
          }
          if (data.mode === "all" || data.mode === "before") {
              if (data.mode === "before") loadMoreSpinner.remove();
              loadmoreButton = document.createElement("button");
              loadmoreButton.classList.add("input");
              loadmoreButton.classList.add("hoverable");
              loadmoreButton.textContent = "Load more messages";
              loadmoreButton.setAttribute('onclick', "loadMor()");
              messages.appendChild(loadmoreButton);
              updateHeader();
          }
      });
      
      function back() {
        fader.classList.add("fade-in");
        window.location.replace("https://scandium.glitch.me/");
      }

      function loadMsgs() {
        const data = {
          server: server,
          channel: channel.value,
          mode: "all"
        }
        while (messages.firstChild) {
            messages.removeChild(messages.firstChild);
        }
        const loading = document.createElement("progress");
        loading.style.alignSelf = "center";
        loading.max = 1000;
        loading.value = 0;
        progressbar = loading;
        messages.appendChild(loading);
        socket.emit('loadMsgs', data);
        loadBar();
      }
      
      function loadMor() {
        loadmoreButton.remove();
        loadMoreSpinner = document.createElement("img");
        loadMoreSpinner.src = "https://cdn.glitch.com/3ebdc662-0a1e-4e5b-a129-4e6528173744%2Fcd514331234507.564a1d2324e4e.gif?v=1605558267665";
        loadMoreSpinner.style.maxWidth = "7%";
        loadMoreSpinner.style.maxHeight = "auto";
        loadMoreSpinner.style.alignSelf = "center";
        messages.appendChild(loadMoreSpinner);
        loadMoreSpinner.scrollIntoView({behavior: "smooth", block: "center"});
        
        const data = {
          server: server,
          channel: channel.value,
          mode: "before",
          before: messages.lastChild.previousElementSibling.previousElementSibling.id
        }
        console.log(data.before); 
        socket.emit('loadMor', data);
      }
      
      function sleep(ms) {
          return new Promise((resolve) => {
              setTimeout(resolve, ms);
          });
      }

      function updateHeader() {
        document.querySelector('body > h2').textContent = `Messages: ${server} > ${channel.value}`;
      }

      function updateArr() {
        const c = channel.value;
        const s = server;

        const data = {
          channel: c,
          server: s,
          ID: clientID
        }

        oldC = c;

        socket.emit('updateArr', data);
        loadMsgs();
      }    

      function sendMsg() {
        if (messageContainer.value === '') {
          return messageContainer.classList.add("errorShake");
        }
        
        const data = {
          content: messageContainer.value,
          server: server,
          channel: channel.value,
          userID: idContainer
        }

        socket.emit('sendMessage', data);

        messageContainer.value = '';
      }
      
      function loadBar() {
          const load = setInterval(function() {
            if (progressbar.value >= progressbar.max*.90) {clearInterval(load);}
            progressbar.value += Math.floor(Math.random() * (30));
          }, Math.floor((Math.random() * (2000))) + 700);        
      }

      window.addEventListener("beforeunload", function(evt) {
          oldC = channel.value;
          channel.value = "";
          updateArr();
      });
      
      messageContainer.addEventListener("webkitAnimationEnd", function(e) {
          e.target.classList.remove("errorShake");
      });

